// device verifier

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: deviceverifier/deviceverifier.proto

package deviceverifier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VerifierService_Verify_FullMethodName = "/deviceverifier.VerifierService/verify"
)

// VerifierServiceClient is the client API for VerifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifierServiceClient interface {
	Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error)
}

type verifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifierServiceClient(cc grpc.ClientConnInterface) VerifierServiceClient {
	return &verifierServiceClient{cc}
}

func (c *verifierServiceClient) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	out := new(VerifyResp)
	err := c.cc.Invoke(ctx, VerifierService_Verify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifierServiceServer is the server API for VerifierService service.
// All implementations must embed UnimplementedVerifierServiceServer
// for forward compatibility
type VerifierServiceServer interface {
	Verify(context.Context, *VerifyReq) (*VerifyResp, error)
	mustEmbedUnimplementedVerifierServiceServer()
}

// UnimplementedVerifierServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVerifierServiceServer struct {
}

func (UnimplementedVerifierServiceServer) Verify(context.Context, *VerifyReq) (*VerifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedVerifierServiceServer) mustEmbedUnimplementedVerifierServiceServer() {}

// UnsafeVerifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifierServiceServer will
// result in compilation errors.
type UnsafeVerifierServiceServer interface {
	mustEmbedUnimplementedVerifierServiceServer()
}

func RegisterVerifierServiceServer(s grpc.ServiceRegistrar, srv VerifierServiceServer) {
	s.RegisterService(&VerifierService_ServiceDesc, srv)
}

func _VerifierService_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServiceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VerifierService_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServiceServer).Verify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VerifierService_ServiceDesc is the grpc.ServiceDesc for VerifierService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifierService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deviceverifier.VerifierService",
	HandlerType: (*VerifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "verify",
			Handler:    _VerifierService_Verify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deviceverifier/deviceverifier.proto",
}
