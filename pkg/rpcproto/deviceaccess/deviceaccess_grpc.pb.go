// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: deviceaccess/deviceaccess.proto

package devicestatus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessService_Post_FullMethodName  = "/deviceaccess.AccessService/Post"
	AccessService_Get_FullMethodName   = "/deviceaccess.AccessService/Get"
	AccessService_ObGet_FullMethodName = "/deviceaccess.AccessService/ObGet"
)

// AccessServiceClient is the client API for AccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessServiceClient interface {
	Post(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	Get(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	ObGet(ctx context.Context, in *ObGetReq, opts ...grpc.CallOption) (AccessService_ObGetClient, error)
}

type accessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessServiceClient(cc grpc.ClientConnInterface) AccessServiceClient {
	return &accessServiceClient{cc}
}

func (c *accessServiceClient) Post(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, AccessService_Post_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessServiceClient) Get(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, AccessService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessServiceClient) ObGet(ctx context.Context, in *ObGetReq, opts ...grpc.CallOption) (AccessService_ObGetClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccessService_ServiceDesc.Streams[0], AccessService_ObGet_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &accessServiceObGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AccessService_ObGetClient interface {
	Recv() (*ObGetResp, error)
	grpc.ClientStream
}

type accessServiceObGetClient struct {
	grpc.ClientStream
}

func (x *accessServiceObGetClient) Recv() (*ObGetResp, error) {
	m := new(ObGetResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AccessServiceServer is the server API for AccessService service.
// All implementations must embed UnimplementedAccessServiceServer
// for forward compatibility
type AccessServiceServer interface {
	Post(context.Context, *Req) (*Resp, error)
	Get(context.Context, *Req) (*Resp, error)
	ObGet(*ObGetReq, AccessService_ObGetServer) error
	mustEmbedUnimplementedAccessServiceServer()
}

// UnimplementedAccessServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccessServiceServer struct {
}

func (UnimplementedAccessServiceServer) Post(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedAccessServiceServer) Get(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAccessServiceServer) ObGet(*ObGetReq, AccessService_ObGetServer) error {
	return status.Errorf(codes.Unimplemented, "method ObGet not implemented")
}
func (UnimplementedAccessServiceServer) mustEmbedUnimplementedAccessServiceServer() {}

// UnsafeAccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessServiceServer will
// result in compilation errors.
type UnsafeAccessServiceServer interface {
	mustEmbedUnimplementedAccessServiceServer()
}

func RegisterAccessServiceServer(s grpc.ServiceRegistrar, srv AccessServiceServer) {
	s.RegisterService(&AccessService_ServiceDesc, srv)
}

func _AccessService_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessService_Post_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).Post(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).Get(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessService_ObGet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObGetReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccessServiceServer).ObGet(m, &accessServiceObGetServer{stream})
}

type AccessService_ObGetServer interface {
	Send(*ObGetResp) error
	grpc.ServerStream
}

type accessServiceObGetServer struct {
	grpc.ServerStream
}

func (x *accessServiceObGetServer) Send(m *ObGetResp) error {
	return x.ServerStream.SendMsg(m)
}

// AccessService_ServiceDesc is the grpc.ServiceDesc for AccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deviceaccess.AccessService",
	HandlerType: (*AccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _AccessService_Post_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccessService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObGet",
			Handler:       _AccessService_ObGet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deviceaccess/deviceaccess.proto",
}
